package de.ctdo.ldapservice.web;

import de.ctdo.ldapservice.business.EmailService;
import de.ctdo.ldapservice.business.PersonService;
import de.ctdo.ldapservice.configuration.AppConfig;
import de.ctdo.ldapservice.model.Person;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.validation.Valid;
import java.util.Optional;

@Controller
@RequestMapping("/register")
@AllArgsConstructor(onConstructor = @__(@Autowired))
@Slf4j
public class RegController {

    // this will be filled from a constructor generated by lombok
    private final PersonService personService;
    private final EmailService emailService;
    private final AppConfig appConfig;

    @ModelAttribute
    public void addShellsToModel(Model model) {
        model.addAttribute("shells", appConfig.getShells());
    }

    @GetMapping
    public String handleGet(Model model, @ModelAttribute Person person) {
        log.info("handleGet model = " + model);
        model.addAttribute("person", person);
        return "person";
    }


    @PostMapping
    public String handlePost(Model model, @Valid Person person, BindingResult bindingResult, RedirectAttributes redirectAttributes) {
        log.info("handlePost person = " + person + " bindingResult = " + bindingResult);

        if (bindingResult.hasErrors()) {
            log.info("has Errors");
            return "person";
        }

        Optional<Person> personOptional = personService.create(person);

        if (!personOptional.isPresent()) {
            log.error("could not save user");
            model.addAttribute("status", "status.user.notcreated");
            return "person";
        }

        redirectAttributes.addFlashAttribute("status", "status.user.created");
        emailService.sendEmail(person);
        return "redirect:/";

    }


}
